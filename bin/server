#!/usr/bin/env node

var http = require('http'),
    urlroute = require('url'),
    path = require('path'),
    fs = require('fs'),
    port = 8080,
    numreq = 0,
    url = 'http://localhost:' + port + '/';
/* We can access nodejitsu enviroment variables from process.env */
/* Note: the SUBDOMAIN variable will always be defined for a nodejitsu app */
if(process.env.SUBDOMAIN){
  url = 'http://' + process.env.SUBDOMAIN + '.jit.su/';
}

////////////////////////////////////////////////////

function handleStaticPages(pathName, res) {
    var ext = path.extname(pathName);
    var base = path.basename(pathName);
    switch(ext) {
        case '.css':
            res.writeHead(200, {"Content-Type": "text/css"});
            fs.readFile('./css/' + base, 'utf8', function(err, data) {
                if(err) {
					console.error(err);
					res.end(err);
				} else {
			        res.end(data);
			    }
            });
            console.log('Routed for Cascading Style Sheet '+ pathName +' Successfully\n');
        break;
        case '.js':
            res.writeHead(200, {"Content-Type": "text/javascript"});
            fs.readFile('./js/' + base, 'utf8', function(err, data) {
                if(err) {
					console.error(err);
					res.end(err);
				} else {
			        res.end(data);
			    }
            });
            console.log('Routed for Javascript '+ pathName +' Successfully\n');
        break;
        case '.html':
            res.writeHead(200, {"Content-Type": "text/html"});
            fs.readFile('./' + base, 'utf8', function(err, data) {
            	if(err) {
					console.error(err);
					res.end(err);
				} else {
			        res.end(data);
			    }
            });
            console.log('Routed for Hyper Text Markup Language '+ pathName +' Successfully\n');
        break;
    }
}

/////////////////////////////////////////////////////

function handleProjects(pathName, res) {
	var ext = path.extname(pathName);
    console.log('handleProjects function is working.... on ' + ext);
	    switch(ext) {
	        case '.css':
	            res.writeHead(200, {"Content-Type": "text/css"});
	            fs.readFile( './pageproofs/' + pathName.substr(pathName.indexOf('oofs/')+5), 'utf8', function(err, data) {
	                if(err) {
						console.error(err);
						res.end(err);
					} else {
				        res.end(data);
				    }
	            });
	            console.log('.css file of Project is routed\n');
	        break;
	        case '.js':
	            res.writeHead(200, {"Content-Type": "text/javascript"});
	            fs.readFile( './pageproofs/' + pathName.substr(pathName.indexOf('oofs/')+5), 'utf8', function(err, data) {
	                if(err) {
						console.error(err);
						res.end(err);
					} else {
				        res.end(data);
				    }
	            });
	            console.log('.js file of Project is routed\n');
	        break;
	        case '.html':
	            res.writeHead(200, {"Content-Type": "text/html"});
	            fs.readFile( './pageproofs/' + pathName.substr(pathName.indexOf('oofs/')+5), 'utf8', function(err, data) {
	            	if(err) {
						console.error(err);
						res.end(err);
					} else {
				        res.end(data);
				    }
	            });
	            console.log('.html file of Project is routed\n');
	        break;
	        case '.jpg':
	            res.writeHead(200, {"Content-Type": "image/jpg"});
	            fs.readFile( './pageproofs/' + pathName.substr(pathName.indexOf('oofs/')+5), 'binary', function(err, file) {
	            	if(err) {
						console.error(err);
						res.end(err);
					} else {
						res.write(file, "binary");
				        res.end();
				    }
	            });
	            console.log('.jpg file of Project is routed\n');
	        break;
	        case '.otf':
	            res.writeHead(200, {"Content-Type": "application/font-sfnt"});
	            fs.readFile( './pageproofs/' + pathName.substr(pathName.indexOf('oofs/')+5), 'utf8', function(err, data) {
	            	if(err) {
						console.error(err);
						res.end(err);
					} else {
				        res.end(data);
				    }
	            });
	            console.log('.otf file of Project is routed\n');
	        break;
	        case '.ttf':
	            res.writeHead(200, {"Content-Type": "application/font-sfnt"});
	            fs.readFile( './pageproofs/' + pathName.substr(pathName.indexOf('oofs/')+5), 'utf8', function(err, data) {
	            	if(err) {
						console.error(err);
						res.end(err);
					} else {
				        res.end(data);
				    }
	            });
	            console.log('.ttf file of Project is routed\n');
	        break;
	        case '.eot':
	            res.writeHead(200, {"Content-Type": "application/vnd.ms-fontobject"});
	            fs.readFile( './pageproofs/' + pathName.substr(pathName.indexOf('oofs/')+5), 'utf8', function(err, data) {
	            	if(err) {
						console.error(err);
						res.end(err);
					} else {
				        res.end(data);
				    }
	            });
	            console.log('.eot file of Project is routed\n');
	        break;
	        case '.eot':
	            res.writeHead(200, {"Content-Type": "application/font-woff"});
	            fs.readFile( './pageproofs/' + pathName.substr(pathName.indexOf('oofs/')+5), 'utf8', function(err, data) {
	            	if(err) {
						console.error(err);
						res.end(err);
					} else {
				        res.end(data);
				    }
	            });
	            console.log('.eot file of Project is routed\n');
	        break;
	    }
}
/////////////////////////////////////////////////////

function handleWebApps(pathName, res) {
	var ext = path.extname(pathName);
    console.log('handleWebApps function is working.... on ' + ext);
	    switch(ext) {
	        case '.css':
	            res.writeHead(200, {"Content-Type": "text/css"});
	            fs.readFile( './webapps/' + pathName.substr(pathName.indexOf('bapps/')+6), 'utf8', function(err, data) {
	                if(err) {
						console.error(err);
						res.end(err);
					} else {
				        res.end(data);
				    }
	            });
	            console.log('.css file of Project is routed\n');
	        break;
	        case '.js':
	            res.writeHead(200, {"Content-Type": "text/javascript"});
	            fs.readFile( './webapps/' + pathName.substr(pathName.indexOf('bapps/')+6), 'utf8', function(err, data) {
	                if(err) {
						console.error(err);
						res.end(err);
					} else {
				        res.end(data);
				    }
	            });
	            console.log('.js file of Project is routed\n');
	        break;
	        case '.html':
	            res.writeHead(200, {"Content-Type": "text/html"});
	            fs.readFile( './webapps/' + pathName.substr(pathName.indexOf('bapps/')+6), 'utf8', function(err, data) {
	            	if(err) {
						console.error(err);
						res.end(err);
					} else {
				        res.end(data);
				    }
	            });
	            console.log('.html file of Project is routed\n');
	        break;
	        case '.jpg':
	            res.writeHead(200, {"Content-Type": "image/jpg"});
	            fs.readFile( './webapps/' + pathName.substr(pathName.indexOf('bapps/')+6), 'binary', function(err, file) {
	            	if(err) {
						console.error(err);
						res.end(err);
					} else {
						res.write(file, "binary");
				        res.end();
				    }
	            });
	            console.log('.jpg file of Project is routed\n');
	        break;
	        case '.otf':
	            res.writeHead(200, {"Content-Type": "application/font-sfnt"});
	            fs.readFile( './webapps/' + pathName.substr(pathName.indexOf('bapps/')+6), 'utf8', function(err, data) {
	            	if(err) {
						console.error(err);
						res.end(err);
					} else {
				        res.end(data);
				    }
	            });
	            console.log('.otf file of Project is routed\n');
	        break;
	        case '.ttf':
	            res.writeHead(200, {"Content-Type": "application/font-sfnt"});
	            fs.readFile( './webapps/' + pathName.substr(pathName.indexOf('bapps/')+6), 'utf8', function(err, data) {
	            	if(err) {
						console.error(err);
						res.end(err);
					} else {
				        res.end(data);
				    }
	            });
	            console.log('.ttf file of Project is routed\n');
	        break;
	        case '.eot':
	            res.writeHead(200, {"Content-Type": "application/vnd.ms-fontobject"});
	            fs.readFile( './webapps/' + pathName.substr(pathName.indexOf('bapps/')+6), 'utf8', function(err, data) {
	            	if(err) {
						console.error(err);
						res.end(err);
					} else {
				        res.end(data);
				    }
	            });
	            console.log('.eot file of Project is routed\n');
	        break;
	        case '.eot':
	            res.writeHead(200, {"Content-Type": "application/font-woff"});
	            fs.readFile( './webapps/' + pathName.substr(pathName.indexOf('bapps/')+6), 'utf8', function(err, data) {
	            	if(err) {
						console.error(err);
						res.end(err);
					} else {
				        res.end(data);
				    }
	            });
	            console.log('.eot file of Project is routed\n');
	        break;
	    }
}

/////////////////////////////////////////////////////

function serve(route, handle) {
	function onRequest(req, res) {
//		var postData = ""; 
		var pathname = urlroute.parse(req.url).pathname
		numreq +=1
		console.log('request recieved ' + numreq + "times!\n");
		console.log("request for " + pathname + " received.");
/*	
		req.setEncoding("utf8");

		req.addListener("data", function(postDataChunk){
			postData +=postDataChunk
			console.log("Received POST data chunk '" + postDataChunk + "'.");
		});

		req.addListener("end", function() {
			route(handle, pathname, res, postData);
		});
*/
		if(pathname.indexOf('/pageproofs/') != -1) {
			handleProjects(pathname, res);
		} else if(pathname.indexOf('/webapps/') != -1) {
			handleWebApps(pathname, res);
		} else if(path.extname(pathname) == '.css' || path.extname(pathname) == '.html' || path.extname(pathname) == '.js') {
			handleStaticPages(pathname, res);
		} else {
			route(handle, pathname, res, req);
		}
	}
	
	http.createServer(onRequest).listen(port);
	console.log('\nThe http server has started at: ' + url + '\n');
}

exports.serve = serve;